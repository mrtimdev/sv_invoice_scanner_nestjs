{{#section "styles"}}
    <link href="/assets/datatables.net-dt/css/dataTables.dataTables.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    <style>
        #scansTable {
            width: 100% !important;
            border-collapse: collapse;
        }

        .stat-filter-btn {
            @apply px-3 py-1 text-sm rounded-full bg-gray-100 text-gray-600 hover:bg-gray-200 transition-colors duration-200;
        }
        .stat-filter-btn.active {
            @apply bg-primary text-white hover:bg-primary-dark;
        }
        .datepicker {
            min-width: 120px;
        }
        #scanPreview {
            transition: all 0.3s ease;
        }

        .progress-bar {
            height: 4px;
            background-color: #e5e7eb;
            border-radius: 2px;
            margin-top: 8px;
            overflow: hidden;
        }

        .progress-fill {
            height: 100%;
            background-color: #3b82f6;
            width: 0%;
            transition: width 0.3s ease;
        }

        #liveText {
            min-height: 200px;
            font-family: monospace;
            white-space: pre-wrap;
        }
        
        .camera-btn {
            @apply px-4 py-2 text-white rounded-lg transition-all duration-200 hover:shadow-md;
        }
        
        .camera-container {
            @apply bg-gray-100 dark:bg-gray-800 rounded-lg overflow-hidden;
        }
        
        #file-upload-container {
            @apply border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-xl p-6 text-center transition-colors duration-200 hover:border-blue-500 dark:hover:border-blue-400;
        }
        
        .scan-type-select {
            @apply block w-full rounded-lg border border-gray-300 bg-white dark:bg-gray-800 dark:border-gray-700 py-2 px-3 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-200 dark:focus:ring-blue-700 transition-colors duration-200;
        }
        
        .submit-btn {
            @apply w-full py-3 px-6 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg shadow-md transition-all duration-200 transform hover:scale-[1.02] active:scale-95;
        }
        .text-green-500 { color: #10B981; }
        .text-yellow-500 { color: #F59E0B; }
        .text-red-500 { color: #EF4444; }
        #globalProgressText .text-xs {
            font-size: 0.75rem;
            opacity: 0.8;
        }
        .alert {
            padding: 1rem;
            margin-bottom: 1rem;
            border: 1px solid transparent;
            border-radius: 0.25rem;
        }
            .alert-success {
            color: #155724;
            background-color: #d4edda;
            border-color: #c3e6cb;
        }
            .alert-error {
            color: #721c24;
            background-color: #f8d7da;
            border-color: #f5c6cb;
        }
    </style>
{{/section}}

<div class="min-h-screen bg-gray-50 dark:bg-gray-900 p-4 sm:p-6 lg:p-8 !pt-[105px] font-sans transition-colors duration-200">
    <div class="max-w-7xl mx-auto">
        <!-- Breadcrumb -->
        <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mb-8">
            <div class="bg-white dark:bg-gray-800 rounded-xl shadow-sm p-4 w-full">
                <nav class="flex" aria-label="Breadcrumb">
                    <ol class="inline-flex items-center space-x-1 md:space-x-2 rtl:space-x-reverse">
                        <li class="inline-flex items-center">
                            <a href="#" class="inline-flex items-center text-sm font-medium text-gray-700 hover:text-blue-600 dark:text-gray-300 dark:hover:text-white transition-colors duration-200">
                                <svg class="w-3 h-3 me-2.5 text-gray-500 dark:text-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                                    <path d="m19.707 9.293-2-2-7-7a1 1 0 0 0-1.414 0l-7 7-2 2a1 1 0 0 0 1.414 1.414L2 10.414V18a2 2 0 0 0 2 2h3a1 1 0 0 0 1-1v-4a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v4a1 1 0 0 0 1 1h3a2 2 0 0 0 2-2v-7.586l.293.293a1 1 0 0 0 1.414-1.414Z"/>
                                </svg>
                                Home
                            </a>
                        </li>
                        <li>
                            <div class="flex items-center">
                                <svg class="rtl:rotate-180 w-3 h-3 text-gray-400 mx-1" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
                                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 9 4-4-4-4"/>
                                </svg>
                                <a href="/admim/scanns" class="ms-1 text-sm font-medium text-gray-700 hover:text-blue-600 dark:text-gray-300 dark:hover:text-white transition-colors duration-200">Scans</a>
                            </div>
                        </li>
                        <li aria-current="page">
                            <div class="flex items-center">
                                <svg class="rtl:rotate-180 w-3 h-3 text-gray-400 mx-1" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
                                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 9 4-4-4-4"/>
                                </svg>
                                <span class="ms-1 text-sm font-medium text-gray-500 dark:text-gray-400">New</span>
                            </div>
                        </li>
                    </ol>
                </nav>


                <div class="flex items-center gap-2" >
                    <button id="cleanQueueBtn" onclick="cleanQueue()"
                        class="w-full text-left px-4 py-2 flex items-center gap-2 rounded-md text-rose-600 dark:text-rose-400 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors duration-200">
                        <i class="fi fi-sr-delete-document"></i>
                        <span>Clean Queue Upload</span>
                    </button>

                </div>
               
            </div>

            
        </div>

        <!-- Main Content -->
        <div id="file-upload-container" class="bg-white dark:bg-gray-800 rounded-xl shadow-md overflow-hidden border border-gray-200 dark:border-gray-700 transition-colors duration-200">
            <!-- Header -->
            <div class="border-b border-gray-200 dark:border-gray-700 px-6 py-4">
                <h2 class="text-2xl font-bold text-gray-800 dark:text-white">Start Invoice Scanning</h2>
                <p class="text-gray-600 dark:text-gray-400 mt-1">Upload or capture an image to extract text</p>
            </div>
            
            <!-- Body -->
            <div class="p-6">
                <!-- Scan Preview Section -->
                <div id="scanPreview" class="hidden mb-8 bg-gray-50 dark:bg-gray-700 rounded-lg p-4">
                    <h3 class="text-lg font-semibold text-gray-800 dark:text-white mb-4">Scan Progress</h3>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                            <div class="relative rounded-lg overflow-hidden bg-gray-100 dark:bg-gray-900">
                                <img id="previewImage" src="" alt="Preview" class="w-full h-auto max-h-80 object-contain">
                            </div>
                            <div class="mt-4">
                                <div class="flex justify-between items-center mb-1">
                                    <span class="text-sm font-medium text-gray-700 dark:text-gray-300">Processing</span>
                                    <span id="progressPercent" class="text-sm font-medium text-gray-700 dark:text-gray-300">0%</span>
                                </div>
                                <div class="progress-bar">
                                    <div id="progressFill" class="progress-fill"></div>
                                </div>
                                <p id="progressText" class="text-sm text-gray-600 dark:text-gray-400 mt-2">Ready to scan</p>
                            </div>
                        </div>
                        <div>
                            <div class="bg-gray-100 dark:bg-gray-900 rounded-lg p-4 h-full">
                                <h4 class="text-sm font-semibold text-gray-700 dark:text-gray-300 mb-2">Extracted Text</h4>
                                <div class="bg-white dark:bg-gray-800 p-3 rounded-md h-64 overflow-auto">
                                    <pre id="liveText" class="whitespace-pre-wrap text-gray-700 dark:text-gray-200 text-sm">Scan results will appear here...</pre>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                
                <!-- Upload Section -->
                <div class="mb-6">
                    <h3 class="text-lg font-semibold text-gray-800 dark:text-white mb-4">Upload Image</h3>
                    <form id="scanForm" action="/admin/scans/upload/new" method="POST" enctype="multipart/form-data" class="space-y-6">
                        <div>
                            <label for="scanType" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                Scan Type
                            </label>
                            <select
                                id="scanType"
                                name="scanType"
                                class="scan-type-select"
                            >
                                <option value="" disabled selected>Select a scan type</option>
                                {{#each scanTypes}}
                                    <option value="{{this}}" {{#eq this "KHB"}}selected{{/eq}}>{{this}}</option>
                                {{/each}}
                            </select>
                        </div>
                        
                        <div class="">
                            <label for="fileInput" class="file-upload-card">
                                <div class="flex flex-col items-center justify-center pt-5 pb-6">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 text-gray-400 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                                    </svg>
                                    <p class="mb-2 text-sm text-gray-500 dark:text-gray-400">
                                        <span class="font-semibold">Click to upload</span> or drag and drop
                                    </p>
                                    <p class="text-xs text-gray-500 dark:text-gray-400">
                                        PNG, JPG, or JPEG (MAX. 10MB)
                                    </p>
                                </div>
                            </label>
                            <input 
                                type="file" 
                                name="image" 
                                id="fileInput" 
                                multiple
                                required 
                                class="hidden"
                            >
                        </div>
                        
                        <button type="submit" class="submit-btn flex items-center justify-center gap-2 text-lg font-semibold text-gray-800 dark:text-white mb-4">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" clip-rule="evenodd" />
                            </svg>
                            Start Scanning
                        </button>
                    </form>

                    <div id="globalProgress" class="mb-4">
                        <div class="w-full bg-gray-200 rounded-full h-4 dark:bg-gray-700">
                            <div id="globalProgressBar" 
                                class="bg-blue-600 h-4 rounded-full transition-all duration-500" 
                                style="width: 0%"></div>
                        </div>
                        <div id="globalProgressText" class="mt-2 text-center text-sm"></div>
                    </div>
                    
                    <div id="previews" class="h-[350px] mt-6 grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4 overflow-x-auto"></div>
                </div>
            </div>
        </div>
    </div>
</div>

{{#section "scripts"}}
<script src="/assets/jquery/dist/jquery.min.js"></script>
{{!-- <script src="/js/scan.js"></script>  --}}

<script>
    $(document).ready(function() {
        let selectedFiles = [];
        let activeJobs = {}; // Track all active jobs

        // File input change handler (unchanged)
        $('#fileInput').on('change', function() {
            const files = this.files;
            selectedFiles = Array.from(this.files);
            if (files.length > 0) {
                $('#file-upload-container').find('.file-upload-card').addClass('border-blue-500 dark:border-blue-400');
                
                const previewsContainer = $('#previews');
                previewsContainer.empty();
                
                Array.from(files).forEach((file, index) => {
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        const preview = $(`
                            <div class="file-preview relative group mb-4" data-file-index="${index}">
                                <img src="${e.target.result}" class="h-32 w-full object-cover rounded-lg border border-gray-200 dark:border-gray-700">
                                <div class="absolute inset-0 bg-black bg-opacity-50 opacity-0 group-hover:opacity-100 rounded-lg flex flex-col items-center justify-center transition-opacity duration-200 p-2">
                                    <span class="text-white text-sm font-medium truncate px-2">${file.name}</span>
                                    <div class="w-full bg-gray-200 rounded-full h-2.5 mt-2 dark:bg-gray-700">
                                        <div class="progress-fill bg-blue-600 h-2.5 rounded-full" style="width: 0%"></div>
                                    </div>
                                    <span class="progress-text text-xs text-white mt-1">Waiting to upload</span>
                                </div>
                            </div>
                        `);
                        previewsContainer.append(preview);
                    };
                    reader.readAsDataURL(file);
                });
            } else {
                $('#file-upload-container').find('.file-upload-card').removeClass('border-blue-500 dark:border-blue-400');
                $('#previews').empty();
            }
        });

        // Drag and drop (unchanged)
        $('#file-upload-container').on('dragover', function(e) {
            e.preventDefault();
            $(this).find('.file-upload-card').addClass('border-blue-500 bg-blue-50 dark:bg-gray-700');
        });

        $('#file-upload-container').on('dragleave drop', function(e) {
            e.preventDefault();
            $(this).find('.file-upload-card').removeClass('border-blue-500 bg-blue-50 dark:bg-gray-700');
        });

        $('#file-upload-container').on('drop', function(e) {
            e.preventDefault();
            const files = e.originalEvent.dataTransfer.files;
            if (files.length > 0) {
                $('#fileInput')[0].files = files;
                $('#fileInput').trigger('change');
            }
        });

        $('#scanForm').on('submit', function(e) {
            e.preventDefault();

            if (selectedFiles.length === 0) {
                alert('Please select files first');
                return;
            }

            const formData = new FormData();
            formData.append('scanType', $('#scanType').val());
            selectedFiles.forEach((file) => formData.append('files', file));

            // Reset and show global progress
            $('#globalProgress').removeClass('hidden');
            $('#globalProgressBar').css('width', '0%');
            $('#globalProgressText').text('Starting upload...');

            $.ajax({
                url: $(this).attr('action'),
                type: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                xhr: function() {
                    const xhr = new XMLHttpRequest();
                    xhr.upload.addEventListener('progress', function(e) {
                        if (e.lengthComputable) {
                            const percent = Math.round((e.loaded / e.total) * 100);
                            $('#globalProgressText').text(`Uploading: ${percent}%`);
                            $('#globalProgressBar').css('width', percent + '%');
                            
                            // Update individual file progress during upload
                            $('.file-preview').each(function() {
                                $(this).find('.progress-fill').css('width', percent + '%');
                                $(this).find('.progress-text').text(`Uploading: ${percent}%`);
                            });
                        }
                    });
                    return xhr;
                },
                success: function(response) {
                    $('#globalProgressText').text('Processing scans...');
                    selectedFiles = [];
                    // Track all jobs and start monitoring
                    response.results.forEach((res, i) => {
                        if (res.status === 'queued') {
                            activeJobs[res.jobId] = {
                                originalName: res.originalName,
                                element: $(`.file-preview[data-file-index="${i}"]`)
                            };
                            
                            // Update UI for queued files
                            const wrapper = $(`.file-preview[data-file-index="${i}"]`);
                            wrapper.find('.progress-fill').css('width', '100%');
                            wrapper.find('.progress-text').text('Queued for scanning');
                        }
                    });
                    
                    // Start monitoring queue progress
                    monitorQueueProgress(response.queueStatus);
                    
                    // Start tracking individual jobs
                    Object.keys(activeJobs).forEach(jobId => {
                        {{!-- trackJobProgress(jobId); --}}
                    });
                },
                error: function(xhr) {
                    $('#globalProgressText').text('Upload failed!').addClass('text-red-500');
                    console.error('Upload error:', xhr.responseText);
                }
            });
        });

        function monitorQueueProgress(initialStatus) {
            // Get initial counts safely
            const initialWaiting = initialStatus?.waiting || 0;
            const initialActive = initialStatus?.active || 0;
            const initialCompleted = initialStatus?.completed || 0;
            
            const totalJobs = initialWaiting + initialActive;
            let lastProcessedCount = initialCompleted;

            if (totalJobs <= 0) {
                $('#globalProgressText').text('No jobs to process');
                return;
            }

            const interval = setInterval(async () => {
                try {
                    const response = await fetch('/admin/scans/queue-status');
                    const data = await response.json();
                    
                    // Get current counts with fallbacks
                    const current = {
                        completed: data.counts?.completed || 0,
                        active: data.counts?.active || 0,
                        waiting: data.counts?.waiting || 0,
                        failed: data.counts?.failed || 0
                    };

                    // Calculate unified progress (0-100%)
                    const processedJobs = current.completed + current.failed;
                    const progress = Math.min(
                        100, 
                        Math.round((processedJobs / totalJobs) * 100)
                    );

                    // Update UI
                    $('#globalProgressBar').css('width', `${progress}%`);
                    $('#globalProgressText').html(`
                        ${progress}% Complete<br>
                        <span class="text-xs">
                            ${processedJobs}/${totalJobs} jobs | 
                            ${current.active} active | 
                            ${current.waiting} queued
                        </span>
                    `);

                    // Check for completion
                    if (progress >= 100 || (current.waiting === 0 && current.active === 0)) {
                        clearInterval(interval);
                        const successRate = Math.round((current.completed / totalJobs) * 100);
                        $('#globalProgressText').html(`
                            <span class="${successRate === 100 ? 'text-green-500' : 'text-yellow-500'}">
                                Completed ${successRate}% successfully
                            </span>
                            <br>
                            <span class="text-xs">
                                ${current.completed} succeeded | 
                                ${current.failed} failed
                            </span>
                        `);
                    }

                    lastProcessedCount = processedJobs;
                    
                } catch (error) {
                    console.error('Monitoring error:', error);
                    $('#globalProgressText').text('Error updating progress').addClass('text-red-500');
                    clearInterval(interval);
                }
            }, 2000); // Update every 2 seconds

            return interval;
        }

        // Track individual job progress
        function trackJobProgress(jobId) {
            const interval = setInterval(async () => {
                try {
                    const response = await fetch(`/admin/scans/jobs/${jobId}/progress`);
                    const data = await response.json();
                    
                    const jobInfo = activeJobs[jobId];
                    if (jobInfo) {
                        const wrapper = jobInfo.element;
                        const progress = data.progress || 0;
                        
                        wrapper.find('.progress-fill').css('width', `${progress}%`);
                        wrapper.find('.progress-text').text(
                            `${data.status} (${progress}%)` + 
                            (data.isFailed ? ' - Failed' : '')
                        );
                        
                        if (data.isComplete || data.isFailed) {
                            clearInterval(interval);
                            delete activeJobs[jobId];
                            
                            if (data.isComplete) {
                                wrapper.find('.progress-fill').addClass('bg-green-500');
                            } else {
                                wrapper.find('.progress-fill').addClass('bg-red-500');
                            }
                        }
                    }
                } catch (error) {
                    console.error(`Job tracking error for ${jobId}:`, error);
                    clearInterval(interval);
                }
            }, 2000);
        }
    });


   async function cleanQueue() {
        if (!confirm('This will cancel all scans AND delete uploaded files in queued task. Continue?')) {
            return;
        }

        try {
            $('#cleanQueueBtn').prop('disabled', true)
            .html('<i class="fa fa-spinner fa-spin"></i> Cleaning...');

            const response = await $.ajax({
                url: '/admin/scans/queue/clean-all',
                method: 'POST',
                timeout: 60000 // 1 minute timeout
            });

            if (response.success) {
                // Reset all UI elements
                $('.file-preview').remove();
                $('.progress-fill').css('width', '0%');
                $('#globalProgressBar').css('width', '0%');
                $('#globalProgressText').html(
                    `<span class="text-green-500">
                    ${response.message}<br>
                    <small>Deleted ${response.deletedFiles.length} files</small>
                    </span>`
                );
                selectedFiles = [];
                // Show detailed feedback
                showAlert(`Cleaned ${response.deletedJobs} jobs and ${response.deletedFiles.length} files`, 'success');
            }
        } catch (error) {
            const errorMsg = error.responseJSON?.message || 'Cleanup failed';
            showAlert(errorMsg, 'error');
        } finally {
            $('#cleanQueueBtn').prop('disabled', false).text('Clean Queue');
        }
        }

        // Helper function for showing alerts
        function showAlert(message, type = 'success') {
            const alertDiv = $(`<div class="alert alert-${type} fixed top-4 right-4 z-50">${message}</div>`);
            $('body').append(alertDiv);
            setTimeout(() => alertDiv.fadeOut(), 5000);
        }
</script>
{{/section}}