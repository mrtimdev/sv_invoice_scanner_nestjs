
{{#section "styles"}}
    <link href="/assets/datatables.net-dt/css/dataTables.dataTables.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    <style>
        #scansTable {
            width: 100% !important;
            border-collapse: collapse;
        }

        .stat-filter-btn {
            @apply px-3 py-1 text-sm rounded-full bg-gray-100 text-gray-600 hover:bg-gray-200 transition-colors duration-200;
        }
        .stat-filter-btn.active {
            @apply bg-primary text-white hover:bg-primary-dark;
        }
        .datepicker {
            min-width: 120px;
        }

        #pdfExportModal {
    backdrop-filter: blur(5px);
}

#pdfExportModal .bg-white {
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
    max-height: 90vh;
    overflow-y: auto;
}

.column-toggle:checked {
    background-color: #3b82f6;
    border-color: #3b82f6;
}

#pdfLoadingOverlay {
    backdrop-filter: blur(3px);
}

#pdfProgressBar {
    transition: width 0.3s ease;
}

.scan-thumbnail {
    border-radius: 4px;
    border: 2px solid #e5e7eb;
    transition: transform 0.2s ease;
}

.scan-thumbnail:hover {
    transform: scale(1.05);
    border-color: #3b82f6;
}

/* Selection styles */
.check-row:checked {
    background-color: #3b82f6;
    border-color: #3b82f6;
}

#check-all:checked {
    background-color: #3b82f6;
    border-color: #3b82f6;
}

/* Button styles */
#downloadSelectedPdfBtn:not(:disabled):hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 6px -1px rgba(239, 68, 68, 0.3);
}

#downloadAllPdfBtn:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 6px -1px rgba(59, 130, 246, 0.3);
}

/* Row selection highlight */
tr.selected {
    background-color: #eff6ff !important;
}

tr.selected td {
    border-color: #bfdbfe !important;
}
        
    </style>
{{/section}}

<div class="min-h-screen bg-gray-50 dark:bg-gray-900 p-4 sm:p-6 lg:p-8 !pt-[105px] font-sans transition-colors duration-200">
    <div class="mx-auto py-0 sm:px-6 lg:px-8">
        <!-- Breadcrumb -->
        <div id="bc" class="flex justify-between items-center bg-white dark:bg-gray-800 shadow-lg rounded-lg w-full mb-8 p-4 transition-colors duration-200">
            <nav class="flex" aria-label="Breadcrumb">
                <ol class="inline-flex items-center space-x-1 md:space-x-2 rtl:space-x-reverse">
                    <li class="inline-flex items-center">
                        <a href="#" class="inline-flex items-center text-sm font-medium text-gray-700 hover:text-primary-600 dark:text-gray-300 dark:hover:text-white transition-colors duration-200">
                            <svg class="w-3 h-3 me-2.5 text-gray-500 dark:text-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                                <path d="m19.707 9.293-2-2-7-7a1 1 0 0 0-1.414 0l-7 7-2 2a1 1 0 0 0 1.414 1.414L2 10.414V18a2 2 0 0 0 2 2h3a1 1 0 0 0 1-1v-4a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v4a1 1 0 0 0 1 1h3a2 2 0 0 0 2-2v-7.586l.293.293a1 1 0 0 0 1.414-1.414Z"/>
                            </svg>
                            Home
                        </a>
                    </li>
                    <li>
                        <div class="flex items-center">
                            <svg class="rtl:rotate-180 w-3 h-3 text-gray-400 mx-1" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
                                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 9 4-4-4-4"/>
                            </svg>
                            <a href="/admim/scanns" class="ms-1 text-sm font-medium text-gray-700 hover:text-primary-600 dark:text-gray-300 dark:hover:text-white transition-colors duration-200">Scans</a>
                        </div>
                    </li>
                    <li aria-current="page">
                        <div class="flex items-center">
                            <svg class="rtl:rotate-180 w-3 h-3 text-gray-400 mx-1" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
                                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 9 4-4-4-4"/>
                            </svg>
                            <span class="ms-1 text-sm font-medium text-gray-500 dark:text-gray-400">List</span>
                        </div>
                    </li>
                </ol>
            </nav>
            
            <div class="flex items-center gap-2" x-data="{ open: false }">
                {{#hasAnyRole user.roles (array "super_admin" "admin")}}
                <a href="/admin/scans/add/new" class="text-white bg-gray-800 hover:bg-gray-700 focus:ring-4 focus:ring-gray-300 font-medium rounded-lg text-sm px-4 py-2 dark:bg-gray-700 dark:hover:bg-gray-600 focus:outline-none dark:focus:ring-gray-800 transition-colors duration-200 flex items-center">
                    <svg class="w-4 h-4 me-2" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 10">
                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 5H1m0 0 4 4M1 5l4-4"/>
                    </svg>
                    New
                </a>
                {{/hasAnyRole}}
                

                <!-- Dropdown Toggle -->
                <div class="relative" @click.outside="open = false">
                    <button @click="open = !open"
                        class="bg-gray-200 hover:bg-gray-300 text-gray-700 font-medium py-2 px-4 rounded-lg transition-colors duration-200 flex items-center gap-2">
                        <i class="fi fi-sr-menu-dots-vertical"></i> More
                    </button>

                    <!-- Dropdown Menu -->
                    
                    <div x-show="open" x-transition x-cloak
                        class="absolute right-0 mt-2 w-56 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-lg z-10">
                        <ul class="py-1 text-sm text-gray-700 dark:text-gray-200">
                            <li>
                                <button id="download-selected"
                                    class="w-full text-left px-4 py-2 flex items-center gap-2 rounded-md hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors duration-200">
                                    <i class="fi fi-sr-zip-file"></i>
                                    <span>Download as ZIP</span>
                                </button>
                            </li>
                            {{#hasAnyRole user.roles (array "super_admin" "admin")}}
                            <li>
                                <button id="delete-selected"
                                    class="w-full text-left px-4 py-2 flex items-center gap-2 rounded-md text-rose-600 dark:text-rose-400 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors duration-200">
                                    <i class="fi fi-sr-delete-document"></i>
                                    <span>Delete Scans</span>
                                </button>
                            </li>

                             <li>
                                 <button id="downloadSelectedPdfBtn" class="w-full text-left px-4 py-2 flex items-center gap-2 rounded-md hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors duration-200" disabled>
                                    <i class="fas fa-file-pdf mr-2"></i>
                                    Export Selected PDF
                                </button>
                            </li>

                           
                            {{/hasAnyRole}}
                        </ul>
                    </div>
                    
                </div>
            </div>
            
        </div>

        <h5>Filter by Scanned date</h5>

        <div id="bc" class="flex justify-between items-center gap-2 bg-white dark:bg-gray-800 shadow-lg rounded-lg w-full mb-8 p-4 transition-colors duration-200">
            <div class="hidden sm:flex gap-2 flex-1">
                <input type="text" id="startDate" class="datepicker text-primary-600 bg-gray-100 border-gray-300 rounded focus:ring-primary-500 dark:focus:ring-primary-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600 dark:text-gray-300 w-full" placeholder="Start Date">
                <span class="flex items-center text-gray-400">to</span>
                <input type="text" id="endDate" class="datepicker text-primary-600 bg-gray-100 border-gray-300 rounded focus:ring-primary-500 dark:focus:ring-primary-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600 dark:text-gray-300 w-full" placeholder="End Date">
            </div>
            
            <button id="applyFilter" class="bg-primary hover:bg-primary-dark text-white font-medium py-2 px-4 rounded-lg transition-colors duration-200 flex items-center gap-2">
                <i class="fas fa-filter"></i> Apply
            </button>
            <button id="resetFilter" class="bg-danger hover:bg-danger-dark text-white font-medium py-2 px-4 rounded-lg transition-colors duration-200 flex items-center gap-2">
                <i class="fi fi-sr-clear-alt"></i>Reset
            </button>
        </div>

        <h5>Filter by Invoice date</h5>
        <div id="bc" class="flex justify-between items-center gap-2 bg-white dark:bg-gray-800 shadow-lg rounded-lg w-full mb-8 p-4 transition-colors duration-200">
            <div class="hidden sm:flex gap-2 flex-1">
                <input type="text" id="invoiceStartDate" class="datepicker text-primary-600 bg-gray-100 border-gray-300 rounded focus:ring-primary-500 dark:focus:ring-primary-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600 dark:text-gray-300 w-full" placeholder="Start Date">
                <span class="flex items-center text-gray-400">to</span>
                <input type="text" id="invoiceEndDate" class="datepicker text-primary-600 bg-gray-100 border-gray-300 rounded focus:ring-primary-500 dark:focus:ring-primary-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600 dark:text-gray-300 w-full" placeholder="End Date">
            </div>
            
            <button id="applyInvoiceDateFilter" class="bg-primary hover:bg-primary-dark text-white font-medium py-2 px-4 rounded-lg transition-colors duration-200 flex items-center gap-2">
                <i class="fas fa-filter"></i> Apply
            </button>
            <button id="resetInoiceDateFilter" class="bg-danger hover:bg-danger-dark text-white font-medium py-2 px-4 rounded-lg transition-colors duration-200 flex items-center gap-2">
                <i class="fi fi-sr-clear-alt"></i>Reset
            </button>
        </div>

        <h5>Filter by No / Sale Order</h5>
        <div id="bc" class="flex justify-between items-center gap-4 bg-white dark:bg-gray-800 shadow-lg rounded-lg w-full mb-8 p-4 transition-colors duration-200">
            <div class="hidden sm:flex gap-2 flex-1">
                <input type="text" id="no" class="text-primary-600 bg-gray-100 border-gray-300 rounded focus:ring-primary-500 dark:focus:ring-primary-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600 dark:text-gray-300 w-full" placeholder="No.">
                <input type="text" id="saleOrder" class="text-primary-600 bg-gray-100 border-gray-300 rounded focus:ring-primary-500 dark:focus:ring-primary-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600 dark:text-gray-300 w-full" placeholder="Sale Order">
            </div>
        </div>

        <!-- Main Content -->
        <section class="mb-2">
            <h2 class="text-2xl font-bold text-gray-800 dark:text-white mb-6 transition-colors duration-200">Invoice Scanning Overview</h2>
            
            <!-- Table Container -->
            <div class="overflow-x-auto p-5 rounded-lg shadow-md border border-gray-200 dark:border-gray-700 transition-colors duration-200">
                <table id="scansTable" class="w-full divide-y divide-gray-200 dark:divide-gray-700 border-collapse">
                    <thead class="bg-gray-50 dark:bg-gray-800 transition-colors duration-200">
                        <tr>

                            <th class="px-4 py-3 text-left text-xs font-medium text-gray-600 dark:text-gray-300 uppercase tracking-wider border-b border-gray-200 dark:border-gray-700">
                                <input id="check-all" type="checkbox" 
                                    class="w-4 h-4 text-primary-600 bg-gray-100 border-gray-300 rounded focus:ring-primary-500 dark:focus:ring-primary-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">

                            </th>
                            <th class="px-4 py-3 text-left text-xs font-medium text-gray-600 dark:text-gray-300 uppercase tracking-wider border-b border-gray-200 dark:border-gray-700">Image</th>
                            <th class="px-4 py-3 text-left text-xs font-medium text-gray-600 dark:text-gray-300 uppercase tracking-wider border-b border-gray-200 dark:border-gray-700">Cropped</th>
                            <th class="px-4 py-3 text-left text-xs font-medium text-gray-600 dark:text-gray-300 uppercase tracking-wider border-b border-gray-200 dark:border-gray-700">Invoice Date</th>
                            <th class="px-4 py-3 text-left text-xs font-medium text-gray-600 dark:text-gray-300 uppercase tracking-wider border-b border-gray-200 dark:border-gray-700">Scanned Text</th>
                            <th class="px-4 py-3 text-left text-xs font-medium text-gray-600 dark:text-gray-300 uppercase tracking-wider border-b border-gray-200 dark:border-gray-700">Created At</th>
                            <th class="px-4 py-3 text-left text-xs font-medium text-gray-600 dark:text-gray-300 uppercase tracking-wider border-b border-gray-200 dark:border-gray-700">Actions</th>
                        </tr>
                    </thead>
                    <tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700 transition-colors duration-200 text-gray-800 dark:text-gray-200">
                        <!-- Example Row -->
                        <tr class="hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors duration-200">
                            <td class="px-4 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white">1</td>
                            <td class="px-4 py-4 whitespace-nowrap">
                                <div class="flex-shrink-0 h-10 w-10">
                                    <img class="h-10 w-10 rounded-sm" src="https://via.placeholder.com/40" alt="Invoice scan">
                                </div>
                            </td>
                            <td class="px-4 py-4 text-sm text-gray-700 dark:text-gray-300 max-w-xs truncate">Invoice #12345 from Vendor Inc. dated 2023-05-15</td>
                            <td class="px-4 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">2023-05-15 14:30</td>
                            <td class="px-4 py-4 whitespace-nowrap text-sm font-medium">
                                <div class="flex space-x-2">
                                    <button class="text-primary-600 dark:text-primary-400 hover:text-primary-900 dark:hover:text-primary-300 transition-colors duration-200">View</button>
                                    <button class="text-red-600 dark:text-red-400 hover:text-red-900 dark:hover:text-red-300 transition-colors duration-200">Delete</button>
                                </div>
                            </td>
                        </tr>
                        <!-- End Example Row -->
                    </tbody>
                </table>
            </div>

            
        </section>
    </div>
</div>

<!-- PDF Export Modal -->
<div id="pdfExportModal" class="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 hidden">
    <div class="bg-white rounded-lg p-6 max-w-2xl w-full mx-4">
        <div class="flex justify-between items-center mb-6">
            <h3 class="text-2xl font-bold text-gray-800">
                <i class="fas fa-file-pdf text-red-600 mr-2"></i>
                Export Selected Scans to PDF
            </h3>
            <button onclick="closePdfExportModal()" class="text-gray-500 hover:text-gray-700 transition-colors">
                <i class="fas fa-times text-xl"></i>
            </button>
        </div>
        
        <div class="mb-6">
            <label class="block text-sm font-medium text-gray-700 mb-2">Report Title</label>
            <input type="text" id="pdfReportTitle" placeholder="Selected Scans Report" 
                   class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                   value="Selected Scans Report">
        </div>

        <div class="mb-6">
            <label class="block text-sm font-medium text-gray-700 mb-3">Content Options</label>
            <div class="space-y-2">
                <label class="flex items-center">
                    <input type="checkbox" checked id="includeImages" class="h-4 w-4 text-blue-600 rounded mr-2">
                    <span class="text-sm text-gray-700">Include Images</span>
                </label>
                <label class="flex items-center">
                    <input type="checkbox" id="includeCroppedImages" class="h-4 w-4 text-blue-600 rounded mr-2">
                    <span class="text-sm text-gray-700">Include Cropped Images</span>
                </label>
                <label class="flex items-center">
                    <input type="checkbox" id="includeFullText" class="h-4 w-4 text-blue-600 rounded mr-2">
                    <span class="text-sm text-gray-700">Include Full Text</span>
                </label>
                <label class="flex items-center">
                    <input type="checkbox" checked id="includeTimestamps" class="h-4 w-4 text-blue-600 rounded mr-2">
                    <span class="text-sm text-gray-700">Include Timestamps</span>
                </label>
            </div>
        </div>

        <div class="mb-6 p-4 bg-blue-50 rounded-md">
            <div class="flex items-start">
                <i class="fas fa-info-circle text-blue-600 mt-1 mr-3"></i>
                <div>
                    <h4 class="text-sm font-medium text-blue-800">Export Information</h4>
                    <p class="text-sm text-blue-600 mt-1" id="exportInfo">
                        No scans selected
                    </p>
                </div>
            </div>
        </div>

        <div class="flex justify-end space-x-3">
            <button onclick="closePdfExportModal()" class="px-4 py-2 text-gray-600 hover:text-gray-800 transition-colors">
                Cancel
            </button>
            <button onclick="generateSelectedPdf()" class="bg-red-600 hover:bg-red-700 text-white px-6 py-2 rounded-md transition-all flex items-center">
                <i class="fas fa-download mr-2"></i>
                Generate PDF
            </button>
        </div>
    </div>
</div>

<!-- PDF Loading Overlay -->
<div id="pdfLoadingOverlay" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
    <div class="bg-white rounded-lg p-8 text-center max-w-md">
        <div class="animate-spin rounded-full h-16 w-16 border-b-2 border-red-600 mx-auto mb-4"></div>
        <h3 class="text-xl font-semibold text-gray-800 mb-2">Generating PDF Report</h3>
        <p class="text-gray-600 mb-4">Please wait while we compile your selected scans...</p>
        <div class="space-y-2">
            <div class="flex justify-between text-sm text-gray-500">
                <span>Selected scans:</span>
                <span id="totalScansCount">0</span>
            </div>
            <div class="flex justify-between text-sm text-gray-500">
                <span>Processed:</span>
                <span id="processedScansCount">0</span>
            </div>
        </div>
        <div class="w-full bg-gray-200 rounded-full h-2 mt-4">
            <div id="pdfProgressBar" class="bg-red-600 h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
        </div>
    </div>
</div>







{{#section "scripts"}}


<script src="/assets/datatables.net/js/dataTables.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/js/all.min.js"></script>


<!-- Alpine.js Modal -->
<div class="" x-data="{ showModal: false, scanData: null }" @scan-details.window="scanData = $event.detail; showModal = true">
  <!-- Modal Overlay -->
  <div 
    x-show="showModal" 
    x-transition 
    x-cloak
    class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50"
  >
    <!-- Modal Content -->
    <div 
      class=" bg-white dark:bg-gray-800 rounded-md shadow-lg w-full max-w-[50rem] max-h-[90vh] overflow-y-auto p-6"
      @click.away="showModal = false"
    >
      <h2 class="text-xl font-semibold mb-4">Scan Details</h2>

      <template x-if="scanData?.scan">
        <div>
          <!-- Scan Date -->
          <p style="position: sticky;" class="mb-2 top-[-24px] pb-[20px] pt-[20px] bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 p-2 shadow-sm">
            <strong>Date:</strong> 
            <span 
              x-text="new Date(scanData.scan.date).toLocaleString('en-US', { 
                  year: 'numeric', 
                  month: 'long', 
                  day: 'numeric', 
                  hour: 'numeric', 
                  minute: 'numeric', 
                  second: 'numeric', 
                  hour12: true 
              })"
            ></span>
            <strong>Original Image:</strong>
          </p>

            <!-- Scan Original Image -->
            <div class="mb-4 position-relative">
                
                <img 
                :src="scanData.scan.imagePath" 
                alt="Original Image" 
                class="mt-2 rounded border max-h-auto w-full object-contain"
                />
            </div>

          <!-- Cropped Image if exists -->
          <template x-if="scanData.scan.croppedPath">
            <div class="mb-4 position-relative">
              <strong style="position: sticky;" class="mb-2 top-[42px] pb-[20px] pt-[20px] bg-opacity-0 text-gray-700 dark:text-gray-300 p-2 shadow-sm">Cropped Image:</strong>
              <img 
                :src="scanData.scan.croppedPath" 
                alt="Cropped Image" 
                class="mt-2 rounded border max-h-auto w-full object-contain"
              />
            </div>
          </template>
        </div>
      </template>

      <!-- Close Button -->
      <div class="text-right">
        <button 
          @click="showModal = false" 
          class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
        >
          Close
        </button>
      </div>
    </div>
  </div>
</div>



    <script>
        $(document).ready(function() {
        
            $(".datepicker").flatpickr({
                dateFormat: "M j, Y",
                maxDate: "today"
            });
            
            const table = new DataTable('#scansTable', {

                lengthMenu: [[10, 25, 50, 100, 200, -1], [10, 25, 50, 100, 200, 'All']],
                processing: true,
                serverSide: true,
                ajax: {
                    url: '/admin/scans/data',
                    type: 'GET',
                    data: function (d) {
                        d.startDate = $('#startDate').val();
                        d.endDate = $('#endDate').val();
                        d.invoiceStartDate = $('#invoiceStartDate').val();
                        d.invoiceEndDate = $('#invoiceEndDate').val();
                        d.no = $('#no').val();
                        d.saleOrder = $('#saleOrder').val();
                    },
                },
                
                columns: [
                    { 
                        data: 'id',
                        className: 'text-center',
                        render: function(data, type, row, meta) {
                            const rowData = JSON.stringify(row).replace(/"/g, '&quot;');
                            return `
                                <input type="checkbox" 
                                    value="${data}"
                                    data-row="${rowData}"
                                    class="check-row w-4 h-4 text-primary-600 bg-gray-100 border-gray-300 rounded focus:ring-primary-500 dark:focus:ring-primary-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                            `;
                        },
                        orderable: false,
                        className: 'text-center',
                        width: '5%'
                    },
                    { 
                        data: 'imagePath',
                        render: function(data) {
                            return data ? 
                                `<img src="${data}" class="scan-thumbnail" style="max-height: 50px;">` : 
                                'No image';
                        },
                        orderable: false,
                        width: '15%'
                    },
                    { 
                        data: 'croppedPath',
                        render: function(data) {
                            return data ? 
                                `<img src="${data}" class="scan-thumbnail" style="max-height: 50px;">` : 
                                'No image';
                        },
                        orderable: false,
                        width: '15%'
                    },
                    { 
                        data: 'invoiceDate',
                        render: function(data) {
                            if (!data) return 'N/A';
                            return new Date(data).toLocaleDateString();
                        },
                        width: '15%'
                    },
                    { 
                        data: 'scannedText',
                        render: function(data) {
                            const truncated = data.length > 30 ? 
                                data.substr(0, 30) + '...' : data;
                            return `<span class="truncated-text" title="${data}">${truncated}</span>`;
                        },
                        searchable: false,
                        orderable: false,
                        width: '30%'
                    },
                    { 
                        data: 'date',
                        render: function(data) {
                            return new Date(data).toLocaleDateString();
                        },
                        width: '15%'
                    },
                    {
                   
                    data: 'id', 
                    title: 'Actions',
                    render: function(data, type, row) {
                       
                        return `
                            <div class="relative" x-data="{ open: false }" @click.away="open = false">
                                <button @click="open = !open" class="inline-flex justify-center w-full rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500">
                                    Actions
                                    <svg class="-mr-1 ml-2 h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                        <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                                    </svg>
                                </button>

                                <div x-show="open" x-transition:enter="transition ease-out duration-100" x-transition:enter-start="transform opacity-0 scale-95" x-transition:enter-end="transform opacity-100 scale-100" x-transition:leave="transition ease-in duration-75" x-transition:leave-start="transform opacity-100 scale-100" x-transition:leave-end="transform opacity-0 scale-95"
                                    class="origin-top-right absolute right-0 mt-2 w-48 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 z-10">
                                    <div class="py-1" role="menu" aria-orientation="vertical" aria-labelledby="options-menu">
                                        
                                        <a href="/admin/scans/${data}/download" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900" role="menuitem">Download File</a>
                                    </div>
                                </div>
                            </div>
                        `;
                    },
                        orderable: false,
                        width: '10%'
                    }
                ],
                order: [[3, 'desc']], 
                responsive: true,
                createdRow: function (row, data, dataIndex) {
                    $(row).attr('data-id', data.id);
                    $(row).addClass('scan-row');
                },
        });

        $('#scansTable tbody').on('click', 'tr.scan-row td', function (e) {
            const $td = $(this);
            const $tr = $td.closest('tr');

            const index = $td.index();
            const lastIndex = $tr.find('td').length - 1;

            if (index === 0 || index === lastIndex) {
                return; // Skip first and last td
            }

            const scanId = $tr.data('id');

            if (scanId) {
                $.ajax({
                    url: `/admin/scans/${scanId}`, 
                    method: 'GET',
                    dataType: 'json',
                    success: function (data) {
                        // ✅ Do something with the scan data (show in modal, etc.)
                        console.log('Scan details:', data);

                        window.dispatchEvent(new CustomEvent('scan-details', { detail: data }));
                    },
                    error: function (xhr, status, error) {
                        console.error('Failed to fetch scan details:', error);
                        alert('Failed to fetch scan details.');
                    }
                });
            }
        });



        
        $('#applyFilter, #applyInvoiceDateFilter').on('click', function () {
            table.ajax.reload();
        });
        $("#resetFilter").on('click', function() {
            $('#startDate, #endDate').val('');
            table.ajax.reload();
        });

         $("#resetInoiceDateFilter").on('click', function() {
            $('#invoiceStartDate, #invoiceEndDate').val('');
            table.ajax.reload();
        });

        $("#no, #saleOrder").on('keyup', function() {
            table.ajax.reload();
        });

        $('#check-all').on('click', function() {
            $('.check-row').prop('checked', $(this).prop('checked'));
        });




        
        $('#delete-selected').click(function () {
            const selectedIds = $('.check-row:checked')
                .map(function () {
                    return $(this).val();
                })
                .get();

            if (selectedIds.length === 0) {
                alert('Please select at least one scan to delete');
                return;
            }

            // Confirm before deleting
            if (!confirm(`Are you sure you want to delete ${selectedIds.length} scan(s)? This action cannot be undone.`)) {
                return;
            }

            $.ajax({
                url: '/admin/scans/deleted-scans', // ✅ updated to match your route
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ ids: selectedIds }),
                success: function (response) {
                    alert('Scans deleted successfully');
                    table.ajax.reload();
                },
                error: function (xhr) {
                    alert('Error deleting scans: ' + (xhr.responseJSON?.message || xhr.statusText));
                }
            });
        });


        
    });
// Global variables
let selectedScans = [];

// Initialize PDF export functionality
function initPdfExport() {
    // Check all functionality
    $('#check-all').on('click', function() {
        const isChecked = $(this).prop('checked');
        $('.check-row').prop('checked', isChecked);
        updateSelectedScans();
        updatePdfButton();
    });

    // Individual checkbox functionality
    $(document).on('change', '.check-row', function() {
        updateSelectedScans();
        updatePdfButton();
        updateSelectAllCheckbox();
    });

    // PDF button handler
    $('#downloadSelectedPdfBtn').click(function() {
        if (selectedScans.length > 0) {
            openPdfExportModal();
        }
    });
}

// Update selected scans array
function updateSelectedScans() {
    selectedScans = [];
    $('.check-row:checked').each(function() {
        try {
            const rowData = $(this).data('row');
            // Parse the row data from the data attribute
            const row = typeof rowData === 'string' ? 
                JSON.parse(rowData.replace(/&quot;/g, '"')) : rowData;
            selectedScans.push(row);
        } catch (error) {
            console.error('Error parsing row data:', error);
        }
    });
}

// Update PDF button state
function updatePdfButton() {
    const selectedBtn = $('#downloadSelectedPdfBtn');
    if (selectedScans.length > 0) {
        selectedBtn.prop('disabled', false);
        selectedBtn.html(`<i class="fas fa-file-pdf mr-2"></i>Export Selected PDF (${selectedScans.length})`);
    } else {
        selectedBtn.prop('disabled', true);
        selectedBtn.html('<i class="fas fa-file-pdf mr-2"></i>Export Selected PDF');
    }
}

// Update select all checkbox
function updateSelectAllCheckbox() {
    const totalRows = $('.check-row').length;
    const checkedRows = $('.check-row:checked').length;
    $('#check-all').prop('checked', totalRows > 0 && checkedRows === totalRows);
}

// Open PDF export modal
function openPdfExportModal() {
    updateExportInfo();
    $('#pdfExportModal').removeClass('hidden').addClass('flex');
}

// Close PDF export modal
function closePdfExportModal() {
    $('#pdfExportModal').removeClass('flex').addClass('hidden');
}

// Update export information
function updateExportInfo() {
    const totalScans = selectedScans.length;
    $('#exportInfo').html(`
        <strong>${totalScans}</strong> scans selected for export<br>
        ${totalScans > 0 ? 'Ready to generate PDF report' : 'Please select scans to export'}
    `);
}



// Generate PDF for selected scans
async function generateSelectedPdf() {
    const title = $('#pdfReportTitle').val() || 'Selected Scans Report';
    const includeImages = $('#includeImages').is(':checked');
    const includeCroppedImages = $('#includeCroppedImages').is(':checked');
    const includeFullText = $('#includeFullText').is(':checked');
    const includeTimestamps = $('#includeTimestamps').is(':checked');
    
    // Show loading overlay
    $('#pdfLoadingOverlay').removeClass('hidden').addClass('flex');
    $('#totalScansCount').text(selectedScans.length);
    $('#processedScansCount').text('0');
    $('#pdfProgressBar').css('width', '0%');
    
    try {
        if (typeof window.jspdf === 'undefined') {
            throw new Error('PDF library not loaded. Please refresh the page.');
        }
        
        const { jsPDF } = window.jspdf;
        const pdf = new jsPDF();

        
        // Add cover page
        addCoverPage(pdf, title, selectedScans.length);
        
        pdf.addPage();
        // Add summary page
        addSummaryPage(pdf, selectedScans);
        pdf.addPage();
        // Add scans pages
        const finalPageNumber = await addScansPages(pdf, selectedScans, {
            includeImages,
            includeCroppedImages,
            includeFullText,
            includeTimestamps
        });

        updateTableOfContents(pdf, finalPageNumber);
        
        // Save PDF
        const filename = `${title.replace(/[^a-zA-Z0-9]/g, '_')}_${new Date().getTime()}.pdf`;
        pdf.save(filename);
        
    } catch (error) {
        console.error('PDF generation failed:', error);
        alert('Failed to generate PDF: ' + error.message);
    } finally {
        $('#pdfLoadingOverlay').removeClass('flex').addClass('hidden');
        closePdfExportModal();
    }
}




function updateTableOfContents(pdf, totalPages) {
    // Go to page 2 (summary page) to update TOC
    pdf.setPage(2);
    
    // Update TOC header with total pages
    pdf.setFontSize(10);
    pdf.setTextColor(100, 100, 100);
    pdf.text(`Total Pages: ${totalPages}`, 160, 15, { align: 'right' });
    
    let yPos = 195;
    
    // Add scan entries to TOC with correct page numbers
    selectedScans.forEach((scan, index) => {
        const pageNumber = index + 3; // Scans start on page 3
        
        if (yPos > 270 && index < selectedScans.length - 1) {
            // If TOC overflows, add continuation note
            pdf.setFontSize(9);
            pdf.setTextColor(150, 150, 150);
            pdf.text('(Table of Contents continues...)', 25, yPos);
            return; // Stop processing this scan for TOC
        }
        
        pdf.setFontSize(10);
        pdf.setTextColor(80, 80, 80);
        pdf.text(`Scan #${index + 1}`, 25, yPos);
        
        pdf.setTextColor(100, 100, 100);
        pdf.text(`Page ${pageNumber}`, 180, yPos, { align: 'right' });
        
        // Dotted line
        pdf.setDrawColor(200, 200, 200);
        pdf.setLineWidth(0.1);
        // pdf.dashedLine(25, yPos + 2, 175, yPos + 2, 1, 1);
        
        yPos += 8;
    });
    
    // Add note if TOC was truncated
    if (selectedScans.length > 10) {
        pdf.setFontSize(8);
        pdf.setTextColor(150, 150, 150);
        pdf.text(`* Showing first 10 of ${selectedScans.length} scans`, 25, 275);
    }
}

// Add cover page
function addCoverPage(pdf, title, totalScans) {
    // Set background color (optional gradient effect)
    pdf.setFillColor(239, 68, 68); // Red background
    pdf.rect(0, 0, 210, 297, 'F');
    
    // Add decorative elements
    pdf.setFillColor(255, 255, 255, 0.1);
    pdf.circle(160, 80, 40, 'F');
    pdf.circle(50, 200, 60, 'F');
    pdf.circle(180, 250, 30, 'F');
    
    // Main title
    pdf.setFontSize(36);
    pdf.setTextColor(255, 255, 255);
    pdf.text(title, 105, 100, { align: 'center' });
    
    // Subtitle
    pdf.setFontSize(18);
    pdf.text('SCAN MANAGEMENT SYSTEM', 105, 120, { align: 'center' });
    
    // Decorative separator
    pdf.setDrawColor(255, 255, 255);
    pdf.setLineWidth(0.5);
    pdf.line(60, 135, 150, 135);
    
    // Scan count
    pdf.setFontSize(16);
    pdf.text(`${totalScans} Selected Scans`, 105, 155, { align: 'center' });
    
    // Generation date
    pdf.setFontSize(12);
    pdf.text(`Generated: ${new Date().toLocaleDateString()}`, 105, 170, { align: 'center' });
    
    // Company/System info
    pdf.setFontSize(10);
    pdf.setTextColor(255, 255, 255, 0.8);
    pdf.text('Confidential Document', 105, 250, { align: 'center' });
    
    // Footer
    pdf.setFontSize(8);
    pdf.setTextColor(255, 255, 255, 0.6);
    pdf.text('© SV Invoice Scanner. All rights reserved 2025.', 105, 280, { align: 'center' });
    
    // Page number (cover)
    pdf.text('Page 1 - Cover', 105, 290, { align: 'center' });
}

// Add summary page
function addSummaryPage(pdf, scans) {
    // Set current page to 2
    pdf.setPage(2);
    
    // Header with page number
    pdf.setFontSize(16);
    pdf.setTextColor(59, 130, 246);
    pdf.text('REPORT SUMMARY', 20, 20);
    pdf.setFontSize(10);
    pdf.setTextColor(100, 100, 100);
    pdf.text('Page 2 - Summary', 190, 20, { align: 'right' });
    
    // Summary content
    let yPos = 40;
    
    const stats = {
        total: scans.length,
        withImages: scans.filter(s => s.imagePath).length,
        withCropped: scans.filter(s => s.croppedPath).length,
        withDates: scans.filter(s => s.invoiceDate).length,
        withText: scans.filter(s => s.scannedText && s.scannedText.length > 0).length
    };
    
    // Summary table
    pdf.setFontSize(12);
    pdf.setTextColor(40, 40, 40);
    pdf.text('Export Overview', 20, yPos);
    yPos += 15;
    
    const summaryData = [
        ['Total Selected Scans', stats.total, '#2563eb'],
        ['With Original Images', stats.withImages, '#10b981'],
        ['With Cropped Images', stats.withCropped, '#8b5cf6'],
        ['With Invoice Dates', stats.withDates, '#f59e0b'],
        ['With Text Content', stats.withText, '#ec4899']
    ];
    
    summaryData.forEach(([label, value, color], index) => {
        // Color dot
        pdf.setFillColor(...hexToRgb(color));
        pdf.circle(25, yPos + 2, 2, 'F');
        
        pdf.setFontSize(10);
        pdf.setTextColor(80, 80, 80);
        pdf.text(`${label}:`, 35, yPos + 3);
        
        pdf.setFontSize(11);
        pdf.setTextColor(40, 40, 40);
        pdf.text(String(value), 120, yPos + 3);
        
        yPos += 8;
    });
    
    yPos += 15;
    
    // Date range
    pdf.setFontSize(12);
    pdf.setTextColor(40, 40, 40);
    pdf.text('Date Range', 20, yPos);
    yPos += 8;
    
    pdf.setFontSize(10);
    pdf.setTextColor(80, 80, 80);
    pdf.text(getDateRange(scans), 20, yPos);
    yPos += 15;
    
    // Report metadata
    pdf.setFontSize(12);
    pdf.setTextColor(40, 40, 40);
    pdf.text('Report Information', 20, yPos);
    yPos += 8;
    
    const metaData = [
        ['Generated', new Date().toLocaleString()],
        ['Format', 'PDF'],
        ['Pages', `Estimated: ${Math.ceil(scans.length / 2) + 2}`],
        ['Status', 'Completed']
    ];
    
    metaData.forEach(([label, value]) => {
        pdf.setFontSize(10);
        pdf.setTextColor(100, 100, 100);
        pdf.text(`${label}:`, 20, yPos);
        pdf.setTextColor(40, 40, 40);
        pdf.text(value, 70, yPos);
        yPos += 6;
    });
    
    // Add decorative border
    pdf.setDrawColor(200, 200, 200);
    pdf.setLineWidth(0.3);
    pdf.rect(15, 30, 180, yPos - 20);
}

// Helper function for hex to RGB conversion
function hexToRgb(hex) {
    const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result ? [
        parseInt(result[1], 16),
        parseInt(result[2], 16),
        parseInt(result[3], 16)
    ] : [0, 0, 0];
}

// Add scans pages
async function addScansPages(pdf, scans, options) {
    // Start from page 3 (after cover and summary)
    let currentPageNumber = 3;
    
    for (let i = 0; i < scans.length; i++) {
        const scan = scans[i];
        const progress = ((i + 1) / scans.length) * 100;
        
        $('#processedScansCount').text(i + 1);
        $('#pdfProgressBar').css('width', `${progress}%`);
        
        // Add new page for each scan except the first one
        if (i > 0) {
            pdf.addPage();
            currentPageNumber++;
        }
        
        // Add scan content
        const finalYPos = await addScanPage(pdf, scan, options, i + 1, currentPageNumber);
        
        // Check if we need another page for this scan (if content overflowed)
        if (finalYPos > 270 && i < scans.length - 1) {
            pdf.addPage();
            currentPageNumber++;
        }
        
        // Small delay to show progress
        await new Promise(resolve => setTimeout(resolve, 50));
    }
    
    return currentPageNumber; // Return the final page number
}

// Add individual scan page
async function addScanPage(pdf, scan, options, scanNumber) {
    const margin = 20;
    let yPos = margin;
    
    // Scan header
    pdf.setFontSize(16);
    pdf.setTextColor(59, 130, 246);
    pdf.text(`Scan #${scanNumber}`, margin, yPos);
    yPos += 10;
    
    // Scan details
    pdf.setFontSize(10);
    pdf.setTextColor(80, 80, 80);
    
    const details = [
        ['ID', `${scan.id}`],
        ['Scan Date', scan.date ? new Date(scan.date).toLocaleDateString() : 'N/A'],
        ['Invoice Date', scan.invoiceDate ? new Date(scan.invoiceDate).toLocaleDateString() : 'N/A']
    ];

    console.log({details})
    
    details.forEach(([label, value]) => {
        pdf.setTextColor(100, 100, 100);
        pdf.text(`${label}:`, margin, yPos);
        pdf.setTextColor(40, 40, 40);
        pdf.text(value, margin + 30, yPos);
        yPos += 6;
    });
    
    yPos += 10;
    
    // Add images if requested
    if (options.includeImages) {
        if (scan.imagePath) {
            try {
                await addImageToPdf(pdf, scan.imagePath, 'Original Image', margin, yPos);
                yPos += 65;
            } catch (error) {
                pdf.setTextColor(150, 150, 150);
                pdf.text('Original image not available', margin, yPos);
                yPos += 10;
            }
        }
    }

    if (options.includeCroppedImages) {
        
        if (scan.croppedPath) {
            try {
                await addImageToPdf(pdf, scan.croppedPath, 'Cropped Image', margin, yPos);
                yPos += 65;
            } catch (error) {
                pdf.setTextColor(150, 150, 150);
                pdf.text('Cropped image not available', margin, yPos);
                yPos += 10;
            }
        }
    }
    
    // Add scanned text
    if (options.includeFullText && scan.scannedText) {
        pdf.setFontSize(12);
        pdf.setTextColor(40, 40, 40);
        pdf.text('Scanned Text:', margin, yPos);
        yPos += 8;
        
        pdf.setFontSize(10);
        pdf.setTextColor(80, 80, 80);
        
        const textLines = pdf.splitTextToSize(scan.scannedText, 170);
        pdf.text(textLines, margin, yPos);
        yPos += textLines.length * 5 + 10;
    }
    
    // Add footer
    if (options.includeTimestamps) {
        pdf.setFontSize(8);
        pdf.setTextColor(100, 100, 100);
        pdf.text(`Generated: ${new Date().toLocaleString()}`, margin, 280);
    }
    
    pdf.text(`Page ${pdf.internal.getNumberOfPages()}`, 190, 280, { align: 'right' });
}

// Add image to PDF
async function addImageToPdf(pdf, imageUrl, title, x, y) {
    try {
        const img = new Image();
        img.crossOrigin = 'Anonymous';
        img.src = imageUrl;
        
        await new Promise((resolve, reject) => {
            img.onload = resolve;
            img.onerror = () => reject(new Error('Failed to load image'));
            setTimeout(() => reject(new Error('Image loading timeout')), 10000);
        });
        
        // Add title
        pdf.setFontSize(10);
        pdf.setTextColor(80, 80, 80);
        pdf.text(title, x, y);
        y += 5;
        
        // PDF page dimensions (A4: 210mm x 297mm in points)
        const pageWidth = 210;
        const pageHeight = 297;
        const margin = 20;
        const contentWidth = pageWidth - (margin * 2);
        
        // Calculate dimensions to fit full width while maintaining aspect ratio
        let imgWidth = contentWidth;
        let imgHeight = (img.height * contentWidth) / img.width;
        
        // If image is too tall for the page, scale it down
        const maxImageHeight = pageHeight - y - 40; // Leave space for footer and next content
        if (imgHeight > maxImageHeight) {
            imgHeight = maxImageHeight;
            imgWidth = (img.width * maxImageHeight) / img.height;
        }
        
        // Center the image horizontally
        const xPos = margin + (contentWidth - imgWidth) / 2;
        
        // Check if we need to add a new page for this image
        if (y + imgHeight > pageHeight - 30) {
            pdf.addPage();
            y = margin;
            xPos = margin + (contentWidth - imgWidth) / 2;
        }
        
        // Add image to PDF with FAST compression for better performance
        pdf.addImage(
            img, 
            'JPEG', 
            xPos, 
            y, 
            imgWidth, 
            imgHeight,
            undefined,
            'FAST'
        );
        
        // Return the new y position after the image
        return y + imgHeight + 15;
        
    } catch (error) {
        console.warn('Failed to add image to PDF:', error);
        
        // Add error message instead of image
        pdf.setFontSize(10);
        pdf.setTextColor(200, 0, 0);
        pdf.text(`${title} - Failed to load: ${error.message}`, x, y);
        
        // Return position for next content
        return y + 10;
    }
}

// Get date range from scans
function getDateRange(scans) {
    const dates = scans.map(s => new Date(s.date)).filter(d => !isNaN(d));
    if (dates.length === 0) return 'No dates available';
    
    const minDate = new Date(Math.min(...dates));
    const maxDate = new Date(Math.max(...dates));
    
    return `${minDate.toLocaleDateString()} - ${maxDate.toLocaleDateString()}`;
}

// Close modal on background click
$('#pdfExportModal').click(function(e) {
    if (e.target === this) {
        closePdfExportModal();
    }
});

// Close modal on ESC key
$(document).keydown(function(e) {
    if (e.key === 'Escape') {
        closePdfExportModal();
    }
});

// Initialize when document is ready
$(document).ready(function() {
    initPdfExport();
    
    // Handle DataTables redraws
    $('#scansTable').on('draw.dt', function() {
        updateSelectedScans();
        updatePdfButton();
        updateSelectAllCheckbox();
    });
});
    </script>
{{/section}}
