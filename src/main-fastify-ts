import 'reflect-metadata';
import { HttpAdapterHost, NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import { ValidationPipe } from '@nestjs/common';
import { AllExceptionsFilter } from './common/filters/all-exceptions.filter';
import { NestFastifyApplication, FastifyAdapter } from '@nestjs/platform-fastify';
import { join } from 'path';
import { FastifyInstance, FastifyReply, FastifyRequest } from 'fastify';
import fastifyMultipart from '@fastify/multipart';
import fastifyFormbody from '@fastify/formbody';
async function bootstrap() {
  const app = await NestFactory.create<NestFastifyApplication>(
    AppModule, 
    new FastifyAdapter({ logger: true }), // Enable Fastify logging
  );

  

  // Debug middleware
  app.use((req: any, res: any, next: any) => {
    console.log('\n=== Incoming Request ===');
    console.log('Origin:', req.headers.origin);
    console.log('Method:', req.method);
    console.log('URL:', req.url);
    console.log('Headers:', req.headers);
    next();
  });

  // Static files
  app.useStaticAssets({
    root: join(__dirname, '..', 'public'),
    prefix: '/public/',
    decorateReply: false,
  });

  app.useStaticAssets({
    root: join(__dirname, '..', 'uploads', 'scans'),
    prefix: '/uploads',
    decorateReply: false, 
    // cacheControl: true,
    // etag: true,
    // maxAge: '7d',
    // list: false
  });


  // Custom 404 handler for scans
  // fastifyInstance.setNotFoundHandler((request: FastifyRequest, reply: FastifyReply) => {
  //   if (request.url.startsWith('/uploads/scans/')) {
  //     reply.status(404).send({
  //       statusCode: 404,
  //       error: 'Not Found',
  //       message: 'Scan file not found'
  //     });
  //   } else {
  //     reply.status(404).send({
  //       statusCode: 404,
  //       error: 'Not Found',
  //       message: 'Resource not found'
  //     });
  //   }
  // });

  app.setViewEngine({
    engine: { handlebars: require('handlebars') },
    templates: join(__dirname, '..', 'views'),
  });

  // CORS Configuration
  const allowedOrigins = process.env.ALLOWED_ORIGINS?.split(',').map(s => s.trim()) || [];
  console.log('Allowed Origins:', allowedOrigins);

  app.enableCors({
    origin: (origin, callback) => {
      if (!origin || allowedOrigins.includes(origin)) {
        callback(null, true);
      } else {
        console.warn('Blocked by CORS:', origin);
        callback(new Error('Not allowed by CORS'), false);
      }
    },
    methods: ['GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization', 'Accept', 'Origin'],
    credentials: true,
    preflightContinue: false,
    optionsSuccessStatus: 204
  });

  // Exception handling
  const httpAdapter = app.get(HttpAdapterHost).httpAdapter;
  app.useGlobalFilters(new AllExceptionsFilter(httpAdapter));
  
  app.useGlobalPipes(new ValidationPipe({
    whitelist: true,
    forbidNonWhitelisted: true,
    transform: true,
  }));

  await app.listen(3000, '0.0.0.0'); // Listen on all interfaces
  console.log(`Application is running on: ${await app.getUrl()}`);
}
bootstrap();